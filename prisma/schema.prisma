// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  image         String?   // For NextAuth.js
  emailVerified DateTime? // For NextAuth.js
  role          String    @default("user")
  language      String    @default("vi")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts Account[]  // For NextAuth.js
  sessions Session[]  // For NextAuth.js
  carts    Cart[]
  orders   Order[]
  
  @@map("users")
}

model Product {
  id          String @id @default(cuid())
  name        String
  category    String
  description String
  price       Float
  stock       Int
  imageUrl    String @map("image_url")
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
  
  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  
  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String @map("cart_id")
  productId String @map("product_id")
  quantity  Int    @default(1)
  createdAt DateTime @default(now())
  
  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  total     Float
  status    String   @default("pending") // pending, paid, completed, cancelled
  paidAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  items           OrderItem[]
  accountDelivery AccountDelivery?
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String @map("order_id")
  productId String @map("product_id")
  quantity  Int    @default(1)
  price     Float  // Price at time of order
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model AccountDelivery {
  id             String    @id @default(cuid())
  orderId        String    @unique @map("order_id")
  credentials    String    // Encrypted account credentials
  deliveryStatus String    @default("pending") // pending, delivered
  deliveryNotes  String?   @map("delivery_notes")
  sentAt         DateTime?
  createdAt      DateTime  @default(now())
  
  // Relations
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("account_deliveries")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}