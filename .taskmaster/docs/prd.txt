<context>
# Overview  
[Provide a high-level overview of your product here. Explain what problem it solves, who it's for, and why it's valuable.]

The Premium Account Marketplace is a web-based e-commerce platform built using **Next.js**. It allows users to purchase premium accounts for digital services like YouTube Premium, ChatGPT Plus, and Notion Pro at discounted prices. The platform streamlines the buying process, ensures trust, and supports full **Vietnamese localization** to serve its primary target audience.

## Problem Statement
Many users want premium digital services but face barriers such as high pricing, unreliable sellers, and a lack of transparency in delivery.

## Target Audience
- Vietnamese-speaking users seeking affordable access to premium tools.
- Students, freelancers, and professionals.

## Value Proposition
- Affordable, secure, and fast access to premium accounts.
- Built on modern technologies (**Next.js**) ensuring scalability and performance.
- Full **Vietnamese-language support** across the user interface.
- Role-based dashboards for buyers and admins with real-time management capabilities.

# Core Features  
[List and describe the main features of your product. For each feature, include:
- What it does
- Why it's important
- How it works at a high level]

## 1. Sign Up / Sign In (Email + Google OAuth)
- **What it does**: Users can register or log in using email or Google.
- **Why it's important**: Lowers onboarding friction and secures user identity.
- **How it works**:  
  - Firebase Auth or NextAuth.js integrated into Next.js App Router.  
  - JWT-based authentication stored via HTTP-only cookies or session storage.

## 2. Product Listing and Detail Pages
- **What it does**: Showcases all available premium account options with filters and full descriptions.
- **Why it's important**: Increases conversion by providing clarity and trust.
- **How it works**:  
  - Pages use **Next.js Dynamic Routing** and **Server-side Rendering (SSR)** for SEO.  
  - Products fetched via REST/GraphQL APIs and displayed with responsive layouts.

## 3. Shopping Cart and Payments
- **What it does**: Allows users to add items, checkout, and pay securely.
- **Why it's important**: Simulates familiar e-commerce behavior; critical for revenue generation.
- **How it works**:  
  - Cart state managed via React Context or Zustand.  
  - Checkout flow powered by Stripe, VNPay, or Momo SDKs integrated in Next.js API routes.  
  - Payment result handled with **webhooks** and reflected in frontend UI.

## 4. Dashboards (User + Admin)
- **What it does**: Provides buyers with order management and admins with product/order control.
- **Why it's important**: Encourages repeat use and improves platform trust.
- **How it works**:  
  - Next.js middleware used to guard routes based on user roles.  
  - Admin panel enables CRUD operations for product inventory.  
  - Users view purchase history and access account credentials.

## 5. Language and Localization (Vietnamese)
- **What it does**: Makes the entire app accessible in Vietnamese.
- **Why it's important**: Primary user base is Vietnamese-speaking.
- **How it works**:  
  - Implements `next-i18next` with language files (`/public/locales/vi`) and default locale set to `vi`.  
  - Static content and dynamic UI texts are fully translated.  
  - Fallback language is English if translations are missing.

# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]

## User Personas
- Vietnamese students and freelancers looking for affordable tools.  
- Admin users responsible for maintaining product inventory and handling orders.

## Key User Flows
- **Buyer Flow**:  
  Visit homepage → Log in with Google → Browse products (in Vietnamese) → Add to cart → Checkout → View account info in dashboard  

- **Admin Flow**:  
  Log in → Access admin dashboard → Add/edit products → Track and fulfill orders → View platform statistics

## UI/UX Considerations
- Mobile-first responsive design with TailwindCSS.  
- Clear Vietnamese CTAs (buttons, labels, messages).  
- Visual feedback after user actions (e.g., “Thanh toán thành công”).  
- Error pages and form validation messages in Vietnamese.

</context>

<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

## System Components
- **Frontend**: Next.js (App Router), TypeScript, TailwindCSS, i18n  
- **Backend**: Node.js (Express/NestJS via custom API or Next.js API routes)  
- **Database**: PostgreSQL (preferred) or MongoDB  
- **Authentication**: Firebase Auth or NextAuth.js  
- **Payments**: Stripe + VNPay/Momo SDK  
- **Localization**: `next-i18next` with static translations

## Data Models
- `User`: id, email, password (hashed), role, language, createdAt  
- `Product`: id, name, category, description, price, stock, image_url  
- `Cart`: userId, items[], updatedAt  
- `Order`: id, userId, productIds[], total, status, paidAt  
- `AccountDelivery`: orderId, credentials, deliveryStatus, sentAt  

## APIs and Integrations
- Google OAuth2  
- Stripe/Momo/VNPay integration  
- Webhooks for payment confirmation  
- REST or GraphQL APIs for product and order management  
- `next-i18next` for internationalization

## Infrastructure Requirements
- Deployment:  
  - Frontend on Vercel (for SSR, ISR, and auto-scaling)  
  - Backend on Render/Heroku or serverless via Vercel API routes  
- CI/CD: GitHub + Vercel Auto Deploy  
- Security: HTTPS, role-based access control, CSRF protection  
- Monitoring: Sentry, LogRocket, Firebase Analytics

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

## MVP Requirements
- Next.js app structure (App Router, TypeScript)  
- Firebase/NextAuth login with Google  
- Static Vietnamese interface (hardcoded)  
- Product list, product detail, add to cart  
- Basic checkout flow with Stripe  
- Manual delivery of credentials via admin dashboard  
- Basic user dashboard (order history, view credentials)  
- Admin dashboard (product CRUD, order management)

## Future Enhancements
- Auto-send credentials after payment  
- Multi-language support (vi/en toggle)  
- Product tags, filters, search  
- Email/SMS order confirmation (in Vietnamese)  
- ZaloPay integration  
- Refund and dispute management  
- Analytics dashboard for admins  
- Notifications and alert center  
- Order export (CSV/PDF) for bookkeeping

# Logical Dependency Chain  
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

1. Set up Next.js project structure (App Router, layout.tsx)  
2. Implement authentication (Google login with Firebase or NextAuth)  
3. Build product listing + detail UI + i18n (Vietnamese only)  
4. Create shopping cart and checkout logic  
5. Add backend order handling and database integration  
6. Build dashboards (user & admin)  
7. Implement credential delivery (manual → automated)  
8. Add Vietnamese email/SMS + real-time updates

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

- **Payment integration issues**  
  → Use Stripe first; VNPay/Momo as fallback with SDK testing in sandbox environments.  

- **Translation inconsistency**  
  → All strings handled via `next-i18next`; require QA from native Vietnamese speakers.  

- **Authentication issues across routes**  
  → Leverage NextAuth middleware + session validation at route level.  

- **Admin errors when delivering credentials**  
  → Add action logs, delivery history, and undo/resend buttons in dashboard.

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]

## Research Findings
- Vietnamese users strongly prefer native-language interfaces.  
- Most users use mobile devices for purchases.  
- Popular payment methods in Vietnam: Momo, VNPay, ZaloPay.  

## Technical Specifications
- Next.js 14+ (App Router, Server Actions)  
- TypeScript, ESLint, Prettier  
- TailwindCSS for UI styling  
- `next-i18next` with default locale `vi`  
- PostgreSQL with Prisma ORM  
- Stripe Webhooks for `payment_intent.succeeded`  
